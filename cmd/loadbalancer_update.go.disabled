package cmd

import (
	"fmt"
	"os"
	"strconv"

	"github.com/civo/civogo"
	"github.com/civo/cli/config"
	"github.com/civo/cli/utility"
	"github.com/spf13/cobra"
)

var lbNameUpdate, lbAlgorithmUpdate string
var lbBackendsUpdate []string

var loadBalancerUpdateCmd = &cobra.Command{
	Use:     "update",
	Aliases: []string{"change", "modify"},
	Example: "civo loadbalancer update ID/NAME [flags]",
	Short:   "Update a load balancer",
	Args:    cobra.MinimumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		utility.EnsureCurrentRegion()

		client, err := config.CivoAPIClient()
		if regionSet != "" {
			client.Region = regionSet
		}
		if err != nil {
			utility.Error("Creating the connection to Civo's API failed with %s", err)
			os.Exit(1)
		}

		loadBalancer, err := client.FindLoadBalancer(args[0])
		if err != nil {
			utility.Error("%s", err)
			os.Exit(1)
		}

		configLoadBalancer := &civogo.LoadBalancerUpdateConfig{}

		if lbNameUpdate != "" {
			configLoadBalancer.Name = lbNameUpdate
		}

		if lbAlgorithmUpdate != "" {
			configLoadBalancer.Algorithm = lbAlgorithmUpdate
		}

		if len(lbBackends) > 0 {
			var configLoadBalancerBackend []civogo.LoadBalancerBackendConfig

			for _, backend := range lbBackendsUpdate {
				data := utility.GetStringMap(backend)

				backend := civogo.LoadBalancerBackendConfig{
					IP: data["ip"],
				}

				var port int
				if data["source-port"] != "" {
					if port, err = strconv.Atoi(data["source-port"]); err != nil {
						utility.Error("%s", err)
						os.Exit(1)
					}
					backend.SourcePort = int32(port)
				}

				if data["target-port"] != "" {
					if port, err = strconv.Atoi(data["target-port"]); err != nil {
						utility.Error("%s", err)
						os.Exit(1)
					}
					backend.TargetPort = int32(port)
				}

				if data["protocol"] != "" {
					backend.Protocol = data["protocol"]
				}

				if data["health-check-port"] != "" {
					if port, err = strconv.Atoi(data["health-check-port"]); err != nil {
						utility.Error("%s", err)
						os.Exit(1)
					}
					backend.HealthCheckPort = int32(port)
				}

				configLoadBalancerBackend = append(configLoadBalancerBackend, backend)
			}

			configLoadBalancer.Backends = configLoadBalancerBackend
		}

		loadBalancerUpdate, err := client.UpdateLoadBalancer(loadBalancer.ID, configLoadBalancer)
		if err != nil {
			utility.Error("%s", err)
			os.Exit(1)
		}

		ow := utility.NewOutputWriterWithMap(map[string]string{"id": loadBalancerUpdate.ID, "hostname": loadBalancerUpdate.Name})

		switch outputFormat {
		case "json":
			ow.WriteSingleObjectJSON(prettySet)
		case "custom":
			ow.WriteCustomOutput(outputFields)
		default:
			fmt.Printf("Updated load balancer with name %s with ID %s\n", utility.Green(loadBalancerUpdate.Name), utility.Green(loadBalancerUpdate.ID))
		}
	},
}
