package cmd

import (
	"fmt"
	"os"
	"strconv"

	"github.com/civo/civogo"
	"github.com/civo/cli/config"
	"github.com/civo/cli/utility"
	"github.com/spf13/cobra"
)

var lbName, lbNetwork, lbAlgorithm, lbExternalTrafficPolicy, lbSessionAffinity, lbExistingFirewall, lbCreateFirewall string
var lbSessionAffinityConfigTimeout int
var lbBackends []string

var loadbalnacerCreateCmdExample = `civo loadbalancer create LB_NAME [flags]

Notes:
* The '--create-firewall' and '--existing-firewall' flags are mutually exclusive. You can't use them together.
* The '--create-firewall' flag can accept:
    * an optional end port using 'start_port-end_port' format (e.g. 8000-8100)
    * an optional CIDR notation (e.g. 0.0.0.0/0)
* When no CIDR notation is provided, the port will get 0.0.0.0/0 (open to public) as default CIDR notation
* When a CIDR notation is provided without slash and number segment, it will default to /32
* Within a rule, you can use comma separator for multiple ports to have same CIDR notation
* To separate between rules, you can use semicolon symbol and wrap everything in double quotes (see below)
* So the following would all be valid:
    * "80,443:0.0.0.0/0;8080:1.2.3.4" (open 80,443 to public and 8080 just for 1.2.3.4/32)
    * "80,443;6000-6500:4.4.4.4/24" (open 80,443 to public and 6000 to 6500 just for 4.4.4.4/24)
* When '--create-firewall' flag is blank, your cluster will be created with the following rules:
    * "80;443" (open 80,443 to public)
* To open all ports for public access, "all" can be provided to '--create-firewall' flag (not recommended)
`

var loadBalancerCreateCmd = &cobra.Command{
	Use:     "create",
	Aliases: []string{"new", "add"},
	Example: loadbalnacerCreateCmdExample,
	Short:   "Create a new load balancer",
	Run: func(cmd *cobra.Command, args []string) {
		utility.EnsureCurrentRegion()

		check, region, err := utility.CheckAvailability("iaas", regionSet)
		if err != nil {
			utility.Error("Error checking availability %s", err)
			os.Exit(1)
		}

		if check {
			utility.Error("Sorry you can't create a loadbalancer in the %s region", region)
			os.Exit(1)
		}

		client, err := config.CivoAPIClient()
		if regionSet != "" {
			client.Region = regionSet
		}
		if err != nil {
			utility.Error("Creating the connection to Civo's API failed with %s", err)
			os.Exit(1)
		}

		configLoadBalancer := &civogo.LoadBalancerConfig{}

		if len(args) > 0 {

			if utility.ValidNameLength(args[0]) {
				utility.Warning("the cluster name cannot be longer than 63 characters")
				os.Exit(1)
			}
			configLoadBalancer.Name = args[0]

		} else {
			configLoadBalancer.Name = utility.RandomName()
		}

		var network = &civogo.Network{}
		if lbNetwork != "" {
			if networkID == "default" {
				network, err = client.GetDefaultNetwork()
				if err != nil {
					utility.Error("Network %s", err)
					os.Exit(1)
				}
			} else {
				network, err = client.FindNetwork(networkID)
				if err != nil {
					utility.Error("Network %s", err)
					os.Exit(1)
				}
			}
			configLoadBalancer.NetworkID = lbNetwork
		}

		if lbCreateFirewall == "" {
			configLoadBalancer.FirewallRules = "80;443"
		} else {
			configLoadBalancer.FirewallRules = lbCreateFirewall
		}

		if lbExistingFirewall != "" {
			if lbCreateFirewall != "" {
				utility.Error("You can't use --create-firewall together with --existing-firewall flag")
				os.Exit(1)
			}

			ef, err := client.FindFirewall(lbExistingFirewall)
			if err != nil {
				utility.Error("Unable to find %q firewall - %s", lbExistingFirewall, err)
				os.Exit(1)
			}

			if ef.NetworkID != network.ID {
				utility.Error("Unable to find firewall %q in %q network", ef.ID, network.Label)
				os.Exit(1)
			}

			configLoadBalancer.FirewallID = ef.ID
			configLoadBalancer.FirewallRules = ""
		}

		if lbAlgorithm != "" {
			configLoadBalancer.Algorithm = lbAlgorithm
		}

		if lbExternalTrafficPolicy != "" {
			configLoadBalancer.ExternalTrafficPolicy = lbExternalTrafficPolicy
		}

		if lbSessionAffinity != "" {
			configLoadBalancer.SessionAffinity = lbSessionAffinity
		}

		if lbSessionAffinityConfigTimeout != 0 {
			configLoadBalancer.SessionAffinityConfigTimeout = int32(lbSessionAffinityConfigTimeout)
		}

		if len(lbBackends) > 0 {
			var configLoadBalancerBackend []civogo.LoadBalancerBackendConfig

			for _, backend := range lbBackends {
				data := utility.GetStringMap(backend)

				backend := civogo.LoadBalancerBackendConfig{
					IP: data["ip"],
				}

				var port int
				if data["source-port"] != "" {
					if port, err = strconv.Atoi(data["source-port"]); err != nil {
						utility.Error("%s", err)
						os.Exit(1)
					}
					backend.SourcePort = int32(port)
				}

				if data["target-port"] != "" {
					if port, err = strconv.Atoi(data["target-port"]); err != nil {
						utility.Error("%s", err)
						os.Exit(1)
					}
					backend.TargetPort = int32(port)
				}

				if data["protocol"] != "" {
					backend.Protocol = data["protocol"]
				}

				if data["health-check-port"] != "" {
					if port, err = strconv.Atoi(data["health-check-port"]); err != nil {
						utility.Error("%s", err)
						os.Exit(1)
					}
					backend.HealthCheckPort = int32(port)
				}

				configLoadBalancerBackend = append(configLoadBalancerBackend, backend)
			}

			configLoadBalancer.Backends = configLoadBalancerBackend
		}

		if regionSet != "" {
			configLoadBalancer.Region = regionSet
		}

		loadBalancer, err := client.CreateLoadBalancer(configLoadBalancer)
		if err != nil {
			utility.Error("Creating the load balancer failed with %s", err)
			os.Exit(1)
		}

		ow := utility.NewOutputWriterWithMap(map[string]string{"id": loadBalancer.ID, "name": loadBalancer.Name})

		switch outputFormat {
		case "json":
			ow.WriteSingleObjectJSON(prettySet)
		case "custom":
			ow.WriteCustomOutput(outputFields)
		default:
			fmt.Printf("Created a new load balancer with name %s with ID %s\n", utility.Green(loadBalancer.Name), utility.Green(loadBalancer.ID))
		}
	},
}
